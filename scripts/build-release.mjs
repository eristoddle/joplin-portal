#!/usr/bin/env node

import esbuild from "esbuild";
import { readFileSync, writeFileSync, existsSync, mkdirSync, copyFileSync, statSync } from "fs";
import { execSync } from "child_process";
import builtins from "builtin-modules";

/**
 * Production build script for Obsidian plugin
 * Creates optimized build with minification and generates release files
 */

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

console.log('🚀 Building production release...');

// Clean previous build
console.log('📁 Cleaning build directory...');
try {
  execSync('rm -rf dist', { stdio: 'ignore' });
} catch (error) {
  // Directory might not exist, ignore
}

// Create dist directory
if (!existsSync('dist')) {
  mkdirSync('dist', { recursive: true });
}

// Build with esbuild
console.log('🔨 Building with esbuild...');
try {
  await esbuild.build({
    banner: {
      js: banner,
    },
    entryPoints: ['main.ts'],
    bundle: true,
    external: [
      'obsidian',
      'electron',
      '@codemirror/autocomplete',
      '@codemirror/collab',
      '@codemirror/commands',
      '@codemirror/language',
      '@codemirror/lint',
      '@codemirror/search',
      '@codemirror/state',
      '@codemirror/view',
      '@lezer/common',
      '@lezer/highlight',
      '@lezer/lr',
      ...builtins
    ],
    format: 'cjs',
    target: 'es2018',
    logLevel: "info",
    sourcemap: false,
    treeShaking: true,
    minify: true,
    outfile: 'main.js',
    metafile: true,
    write: true
  });

  console.log('✓ Build completed successfully');
} catch (error) {
  console.error('❌ Build failed:', error);
  process.exit(1);
}

// Copy required files to dist
console.log('📋 Copying release files...');

const filesToCopy = [
  'main.js',
  'manifest.json',
  'styles.css'
];

filesToCopy.forEach(file => {
  if (existsSync(file)) {
    copyFileSync(file, `dist/${file}`);
    console.log(`✓ Copied ${file}`);
  } else {
    console.warn(`⚠️  Warning: ${file} not found`);
  }
});

// Get version from manifest
const manifest = JSON.parse(readFileSync('manifest.json', 'utf8'));
const version = manifest.version;

// Create release info
const releaseInfo = {
  version: version,
  buildDate: new Date().toISOString(),
  files: filesToCopy.filter(file => existsSync(file)),
  minAppVersion: manifest.minAppVersion
};

writeFileSync('dist/release-info.json', JSON.stringify(releaseInfo, null, 2));
console.log('✓ Created release-info.json');

// Get file sizes
console.log('\n📊 Build Summary:');
filesToCopy.forEach(file => {
  if (existsSync(file)) {
    const stats = statSync(file);
    const sizeKB = (stats.size / 1024).toFixed(2);
    console.log(`   ${file}: ${sizeKB} KB`);
  }
});

console.log(`\n🎉 Release build complete!`);
console.log(`   Version: ${version}`);
console.log(`   Output: dist/`);
console.log(`   Files: ${filesToCopy.filter(file => existsSync(file)).join(', ')}`);